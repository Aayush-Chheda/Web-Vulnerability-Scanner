import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
from pprint import pprint
from forms import get_form_details, get_all_forms

s = requests.Session()
s.headers["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.106 Safari/537.36"

def is_vulnerable(response):

    """
    A simple boolean function that determines whether a page 
    is SQL Injection vulnerable from its `response`
    """
    errors = {
        # MySQL
        "you have an error in your sql syntax;",
        "warning: mysql",
        # SQL Server
        "unclosed quotation mark after the character string",
        # Oracle
        "quoted string not properly terminated",
    }

    for error in errors:
        if error in response.content.decode().lower():
            return True
    return False


def scan_sql_injection(url):

    # test on URL
    flag = False
    for c in "\"'":
        new_url = f"{url}{c}"
        print("[!] Trying", new_url)

        # make the HTTP request
        res = s.get(new_url)
        if is_vulnerable(res):
            flag = True
            # SQL Injection detected on the URL itself, 
            # no need to preceed for extracting forms and submitting them
            print("[+] SQL Injection vulnerability detected, link:", new_url)
            break

    if(not flag):
        print("[-] No SQL Injection vulnerability detected on the URL")

    print()

    # test on HTML forms
    flag = False
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    for form in forms:
        form_details = get_form_details(form)
        for c in "\"'":
            data = {}
            for input_tag in form_details["inputs"]:
                if input_tag["value"] or input_tag["type"] == "hidden":
                    # any input form that has some value or hidden,
                    # just use it in the form body
                    try:
                        data[input_tag["name"]] = input_tag["value"] + c
                    except:
                        pass
                elif input_tag["type"] != "submit":
                    # all others except submit, use some junk data with special character
                    data[input_tag["name"]] = f"test{c}"

            # join the url with the action (form request URL)
            url = urljoin(url, form_details["action"])
            if form_details["method"] == "post":
                res = s.post(url, data=data)
            elif form_details["method"] == "get":
                res = s.get(url, params=data)

            # test whether the resulting page is vulnerable
            if is_vulnerable(res):
                flag = True
                print("[+] SQL Injection vulnerability detected, link:", url)
                print("[+] Form:")
                pprint(form_details)
                break   

    if(not flag):
        print("[-] No SQL Injection vulnerability detected on the HTML forms.")

if __name__ == "__main__":
    url = input("Enter URL: ")
    scan_sql_injection(url)